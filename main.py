import math
import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from flask import Flask
from threading import Thread

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_category = State()
    waiting_for_price = State()

# –•—ç–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç
@dp.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:\n"
        "1. –û–±—É–≤—å üëü\n"
        "2. –§—É—Ç–±–æ–ª–∫–∞/—à—Ç–∞–Ω—ã/—Ö—É–¥–∏ üëï\n"
        "3. –î—Ä—É–≥–æ–µ ‚ùì\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2 –∏–ª–∏ 3):"
    )
    await state.set_state(Form.waiting_for_category)

# –•—ç–Ω–¥–ª–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(Form.waiting_for_category)
async def category_handler(message: Message, state: FSMContext):
    category = message.text.strip()
    if category not in ["1", "2", "3"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
        return

    if category == "3":
        await message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @oleglobok")
        await state.clear()
        return

    await state.update_data(category=category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö ¬• (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(Form.waiting_for_price)

# –•—ç–Ω–¥–ª–µ—Ä —Ü–µ–Ω—ã
@dp.message(Form.waiting_for_price)
async def price_handler(message: Message, state: FSMContext):
    try:
        price_yuan = float(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 289")
        return

    data = await state.get_data()
    category = data["category"]
    weight = 1.5 if category == "1" else 0.6

    # –†–∞—Å—á—ë—Ç—ã
    cbr_rate = get_cbr_exchange_rate()
    rate = cbr_rate * 1.11
    item_price_rub = price_yuan * rate
    delivery_cost = weight * 789
    subtotal = item_price_rub + delivery_cost
    commission = subtotal * 0.10
    total_cost = math.ceil(subtotal + commission)

    await message.answer(
        f"<b>–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {math.ceil(item_price_rub)} ‚ÇΩ\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è ({weight} –∫–≥): {math.ceil(delivery_cost)} ‚ÇΩ\n"
        f"–ö–æ–º–∏—Å—Å–∏—è (10%): {math.ceil(commission)} ‚ÇΩ\n\n"
        f"<b>–ò—Ç–æ–≥–æ:</b> {total_cost} ‚ÇΩ"
    )
    await state.clear()

def get_cbr_exchange_rate():
    return 11.5  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å –¶–ë –†–§, –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å API

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def start_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ long polling!")
    asyncio.run(dp.start_polling(bot, skip_updates=True))

# –°–æ–∑–¥–∞–Ω–∏–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –§–µ–π–∫–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã Flask –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
@app.route('/')
def home():
    return "Bot is running!"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    app.run(host="0.0.0.0", port=5000)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = Thread(target=run_flask)
    thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    start_bot()

