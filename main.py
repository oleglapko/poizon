import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
import asyncio

TOKEN = '7655184269:AAG__JJ6raD0fC-YTVO9S0zbusXMO3itnro'

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –ö–Ω–æ–ø–∫–∏
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É")]
    ],
    resize_keyboard=True
)

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class DeliveryState(StatesGroup):
    choosing_category = State()
    entering_city = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å Poizon. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá", reply_markup=keyboard)
    await state.clear()

@dp.message(F.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É")
async def choose_category(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\nüëü –û–±—É–≤—å\nüëï –û–¥–µ–∂–¥–∞\nüì¶ –î—Ä—É–≥–æ–µ")
    await state.set_state(DeliveryState.choosing_category)

@dp.message(DeliveryState.choosing_category)
async def handle_category(message: Message, state: FSMContext):
    category = message.text.lower()

    if "–æ–±—É–≤—å" in category:
        weight = 1.5
    elif "–æ–¥–µ–∂–¥–∞" in category:
        weight = 0.7
    elif "–¥—Ä—É–≥–æ–µ" in category:
        await message.answer("–ù–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É @oleglobok –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏.")
        await state.clear()
        return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: üëü –û–±—É–≤—å, üëï –û–¥–µ–∂–¥–∞, üì¶ –î—Ä—É–≥–æ–µ")
        return

    await state.update_data(weight=weight)
    await message.answer("–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –°–î–≠–ö):")
    await state.set_state(DeliveryState.entering_city)

@dp.message(DeliveryState.entering_city)
async def handle_city(message: Message, state: FSMContext):
    city = message.text
    data = await state.get_data()
    weight = data.get("weight", 1.0)

    # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    delivery_price = weight * 789
    yuan_rate = 13.5 * 1.11
    commission = 0.1
    total_price = int((delivery_price * yuan_rate) * (1 + commission)) + 1

    await message.answer(f"üì¶ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{total_price} ‚ÇΩ</b>")
    await state.clear()

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

