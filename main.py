import logging
import math
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import F
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

TOKEN = "7655184269:AAG__JJ6raD0fC-YTVO9S0zbusXMO3itnro"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = "https://poizon-5ih7.onrender.com/webhook"

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

CATEGORY_WEIGHTS = {
    "–û–±—É–≤—å": 1.5,
    "–§—É—Ç–±–æ–ª–∫–∞ / –•—É–¥–∏ / –®—Ç–∞–Ω—ã": 0.7,
}

class OrderStates(StatesGroup):
    waiting_for_price = State()
    waiting_for_city = State()

@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.button(text="üëü –û–±—É–≤—å", callback_data="–û–±—É–≤—å")
    builder.button(text="üëï –§—É—Ç–±–æ–ª–∫–∞ / –•—É–¥–∏ / –®—Ç–∞–Ω—ã", callback_data="–§—É—Ç–±–æ–ª–∫–∞ / –•—É–¥–∏ / –®—Ç–∞–Ω—ã")
    builder.button(text="‚ùì –î—Ä—É–≥–æ–µ", callback_data="–î—Ä—É–≥–æ–µ")
    builder.button(text="üÜï –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç", callback_data="new")
    builder.adjust(2, 1, 1)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=builder.as_markup())

@dp.callback_query(F.data == "new")
async def new_calc(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await start(callback.message, state)

@dp.callback_query(F.data.in_(CATEGORY_WEIGHTS.keys()))
async def category_chosen(callback: CallbackQuery, state: FSMContext):
    await state.update_data(category=callback.data)
    await callback.message.answer("–í–≤–µ–¥–∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:")
    await state.set_state(OrderStates.waiting_for_price)

@dp.callback_query(F.data == "–î—Ä—É–≥–æ–µ")
async def other_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø–∏—à–∏ @oleglobok üë§")

@dp.message(OrderStates.waiting_for_price)
async def price_entered(message: Message, state: FSMContext):
    try:
        price_yuan = float(message.text.replace(",", "."))
        await state.update_data(price_yuan=price_yuan)
        await message.answer("–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø–æ–ª—É—á–∞—Ç–µ–ª—å, –°–î–≠–ö):")
        await state.set_state(OrderStates.waiting_for_city)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@dp.message(OrderStates.waiting_for_city)
async def city_entered(message: Message, state: FSMContext):
    user_data = await state.get_data()
    category = user_data["category"]
    weight = CATEGORY_WEIGHTS[category]
    price_yuan = user_data["price_yuan"]
    city_to = message.text

    # 1. –ö—É—Ä—Å
    cbr_url = "https://www.cbr-xml-daily.ru/daily_json.js"
    async with aiohttp.ClientSession() as session:
        async with session.get(cbr_url) as resp:
            data = await resp.json()
            yuan_rate = data["Valute"]["CNY"]["Value"]
            final_rate = yuan_rate * 1.11

    # 2. –¶–µ–Ω–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π
    price_rub = math.ceil(price_yuan * final_rate)
    delivery_from_china = math.ceil(weight * 789)
    total_before_sdek = price_rub + delivery_from_china

    # 3. –°–î–≠–ö
    sdek_payload = {
        "version": "1.0",
        "senderCityId": 44,  # –ú–æ—Å–∫–≤–∞
        "receiverCityName": city_to,
        "tariffId": 137,
        "goods": [{"weight": weight}]
    }

    sdek_url = "https://api.cdek.ru/calculator/tariff"
    async with aiohttp.ClientSession() as session:
        async with session.post(sdek_url, json=sdek_payload) as resp:
            sdek_result = await resp.json()
            sdek_price = sdek_result.get("result", {}).get("price", 0)

    total_price = total_before_sdek + sdek_price

    # –û—Ç–≤–µ—Ç
    text = (
        f"üí¥ –ö—É—Ä—Å —é–∞–Ω—è: {final_rate:.2f}‚ÇΩ\n"
        f"üéÅ –¶–µ–Ω–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π: {price_rub}‚ÇΩ\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è: {delivery_from_china}‚ÇΩ\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –°–î–≠–ö: {sdek_price}‚ÇΩ\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {total_price}‚ÇΩ"
    )

    await message.answer(text)
    await message.answer("üîÅ –ù–∞–∂–º–∏ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞")
    await state.clear()

# Webhook setup
async def on_startup(dispatcher: Dispatcher):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dispatcher: Dispatcher):
    await bot.delete_webhook()

app = web.Application()
dp.startup.register(on_startup)
dp.shutdown.register(on_shutdown)
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=8000)


