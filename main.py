import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
import requests
from config import TOKEN, MANAGER_USERNAME

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CB_RATE_MARKUP = 0.11  # –ù–∞—Ü–µ–Ω–∫–∞ 11% –∫ –∫—É—Ä—Å—É –¶–ë
COMMISSION = 0.10      # –ö–æ–º–∏—Å—Å–∏—è 10%
SHIPPING_RATE = 789    # –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è (—Ä—É–±/–∫–≥)
CATEGORIES = {
    'shoes': {'name': '–û–±—É–≤—å', 'weight': 1.5},
    'clothes': {'name': '–§—É—Ç–±–æ–ª–∫–∞/–ö–æ—Ñ—Ç–∞/–®—Ç–∞–Ω—ã', 'weight': 0.6},
    'other': {'name': '–î—Ä—É–≥–æ–µ', 'weight': None}
}

def start(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞."""
    user = update.effective_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å Poizon.\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=get_categories_keyboard()
    )

def get_categories_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤."""
    keyboard = [
        [InlineKeyboardButton(CATEGORIES['shoes']['name'], callback_data='shoes')],
        [InlineKeyboardButton(CATEGORIES['clothes']['name'], callback_data='clothes')],
        [InlineKeyboardButton(CATEGORIES['other']['name'], callback_data='other')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_cny_rate():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å —é–∞–Ω—è –æ—Ç –¶–ë –†–§ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç 11%."""
    try:
        response = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
        response.raise_for_status()
        rate = response.json()['Valute']['CNY']['Value']
        return rate * (1 + CB_RATE_MARKUP)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return None

def calculate_cost(price_cny, weight_kg):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å."""
    cny_rate = get_cny_rate()
    if cny_rate is None:
        return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —é–∞–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    product_cost_rub = price_cny * cny_rate
    commission = product_cost_rub * COMMISSION
    shipping_china = weight_kg * SHIPPING_RATE
    total = product_cost_rub + commission + shipping_china

    message = (
        f"üìä –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n"
        f"‚Ä¢ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {price_cny} ¬• ‚âà {product_cost_rub:.2f} ‚ÇΩ (–∫—É—Ä—Å: {cny_rate:.2f} ‚ÇΩ/¬•)\n"
        f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è 10%: {commission:.2f} ‚ÇΩ\n"
        f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è: {shipping_china:.2f} ‚ÇΩ\n"
        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {total:.2f} ‚ÇΩ\n\n"
        f"‚ÑπÔ∏è –ö —ç—Ç–æ–π —Å—É–º–º–µ –¥–æ–±–∞–≤–∏—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –°–î–≠–ö, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω–∞ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    )
    return total, message

def handle_category(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    query.answer()
    category = query.data

    if category == 'other':
        query.edit_message_text(f"–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{CATEGORIES[category]['name']}' —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º @{MANAGER_USERNAME}.")
        return

    context.user_data['category'] = category
    query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES[category]['name']}\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:")

def handle_price(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–Ω—ã –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Å—á–µ—Ç."""
    try:
        price_cny = float(update.message.text.replace(',', '.'))
        category = context.user_data.get('category')

        if category not in ['shoes', 'clothes']:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ /start")
            return

        weight_kg = CATEGORIES[category]['weight']
        total, message = calculate_cost(price_cny, weight_kg)

        if total is not None:
            update.message.reply_text(message)
        else:
            update.message.reply_text(message)
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 299.99)")

def error_handler(update: Update, context: CallbackContext) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏."""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {context.error}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CallbackQueryHandler(handle_category))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_price))
    dispatcher.add_error_handler(error_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
