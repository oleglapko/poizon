import logging
import math
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.webhook import WebhookRunner, WebhookRequestHandler
from aiohttp import web
import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å)
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN", "7655184269:AAG__JJ6raD0fC-YTVO9S0zbusXMO3itnro")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://poizon-5ih7.onrender.com/webhook")

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ö—É—Ä—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
YUAN_BASE = 11  # –ù–∞—Ü–µ–Ω–∫–∞ –∫ –∫—É—Ä—Å—É –¶–ë –≤ %
DELIVERY_RATE = 789  # —Ä—É–±/–∫–≥
COMMISSION = 0.1

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üëü –û–±—É–≤—å"), KeyboardButton(text="üëï –§—É—Ç–±–æ–ª–∫–∞ / –•—É–¥–∏ / –®—Ç–∞–Ω—ã")],
        [KeyboardButton(text="‚ùì –î—Ä—É–≥–æ–µ")],
        [KeyboardButton(text="üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")]
    ],
    resize_keyboard=True,
)

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)

@dp.message(F.text.in_({"üëü –û–±—É–≤—å", "üëï –§—É—Ç–±–æ–ª–∫–∞ / –•—É–¥–∏ / –®—Ç–∞–Ω—ã"}))
async def handle_category(message: Message):
    category = message.text
    weight = 1.5 if "–û–±—É–≤—å" in category else 0.7
    await message.answer("–£–∫–∞–∂–∏ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö:")

    @dp.message()
    async def get_price(message: Message):
        try:
            price_yuan = float(message.text)
            rate = round(12.31, 2)
            rate_with_fee = round(rate * (1 + YUAN_BASE / 100), 2)
            price_rub = math.ceil(price_yuan * rate_with_fee * (1 + COMMISSION))
            delivery_china = math.ceil(weight * DELIVERY_RATE)

            await message.answer("–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –°–î–≠–ö:")

            @dp.message()
            async def get_city(message: Message):
                city = message.text
                try:
                    # –†–∞—Å—á—ë—Ç –°–î–≠–ö
                    async with aiohttp.ClientSession() as session:
                        async with session.post(
                            "https://api.cdek.dev/v1/calculate",
                            json={
                                "from_location": {"city": "–ú–æ—Å–∫–≤–∞"},
                                "to_location": {"city": city},
                                "packages": [{"weight": weight * 1000, "length": 30, "width": 20, "height": 10}],
                            },
                        ) as response:
                            cdek_data = await response.json()
                            cdek_price = int(cdek_data["total_price"])
                except Exception as e:
                    cdek_price = 600  # fallback

                total = price_rub + delivery_china + cdek_price

                await message.answer(
                    f"üí± –ö—É—Ä—Å —é–∞–Ω—è: {rate_with_fee}‚ÇΩ\n"
                    f"üéÅ –¶–µ–Ω–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π: {price_rub}‚ÇΩ\n"
                    f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è: {delivery_china}‚ÇΩ\n"
                    f"üìÆ –î–æ—Å—Ç–∞–≤–∫–∞ –°–î–≠–ö: {cdek_price}‚ÇΩ\n"
                    f"üí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"
                    "üîÅ –ù–∞–∂–º–∏ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞"
                )
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö).")

@dp.message(F.text == "‚ùì –î—Ä—É–≥–æ–µ")
async def handle_other(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ @oleglobok ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.")

@dp.message(F.text == "üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
async def handle_reset(message: Message):
    await start(message)

# === Webhook ===
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()

app = web.Application()
app.router.add_post("/webhook", WebhookRequestHandler(dp))
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, port=10000)


